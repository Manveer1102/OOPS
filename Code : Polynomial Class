
#include<bits/stdc++.h>
#include<cmath>
/*************
 Driver program to test below functions
 
int main()
{
    int count1,count2,choice;
    cin >> count1;
    
    int *degree1 = new int[count1];
    int *coeff1 = new int[count1];
    
    for(int i=0;i < count1; i++) {
        cin >> degree1[i];
    }
    
    for(int i=0;i < count1; i++) {
        cin >> coeff1[i];
    }
    
    Polynomial first;
    for(int i = 0; i < count1; i++){
        first.setCoefficient(degree1[i],coeff1[i]);
    }
    
    cin >> count2;
    
    int *degree2 = new int[count2];
    int *coeff2 = new int[count2];
    
    for(int i=0;i < count2; i++) {
        cin >> degree2[i];
    }
    
    for(int i=0;i < count2; i++) {
        cin >> coeff2[i];
    }
    
    Polynomial second;
    for(int i = 0; i < count2; i++){
        second.setCoefficient(degree2[i],coeff2[i]);
    }
    
    cin >> choice;
    
    Polynomial result;
    switch(choice){
            // Add
        case 1:
            result = first + second;
            result.print();
            break;
            // Subtract
        case 2 :
            result = first - second;
            result.print();
            break;
            // Multiply
        case 3 :
            result = first * second;
            result.print();
            break;
            
        case 4 : // Copy constructor
        {
            Polynomial third(first);
            if(third.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
        case 5 : // Copy assignment operator
        {
            Polynomial fourth(first);
            if(fourth.degCoeff == first.degCoeff) {
                cout << "false" << endl;
            }
            else {
                cout << "true" << endl;
            }
            break;
        }
            
    }
    
    return 0;
}
****************/

class Polynomial {
  public:
    int *degCoeff;
  public:
    int capacity;
  Polynomial(){
    degCoeff=new int [5];
    capacity=5;
    for(int i=0;i<capacity;i++){
      degCoeff[i]=0;
    }
  }
  Polynomial(Polynomial const &p){
    this->capacity=p.capacity;
    this->degCoeff=new int [p.capacity];
    for(int i=0;i<p.capacity;i++){
      degCoeff[i]=p.degCoeff[i];
    }
  }
  void operator=(Polynomial const &r){
    this->capacity=r.capacity;
    this->degCoeff=new int [r.capacity];
    for(int i=0;i<r.capacity;i++){
      degCoeff[i]=r.degCoeff[i];
    }
  }
  void setCoefficient(int i,int j){
    if(i<capacity){
      degCoeff[i]=j;
    }
    else{
      int *data=new int[i+1];
      for(int x=0;x<(i+1);x++){
        data[x]=0;
      }
      for(int x=0;x<this->capacity;x++){
        data[x]=degCoeff[x];
      }
      data[i]=j;
      this->capacity=i+1;
      delete [] degCoeff;
      degCoeff=data;
    }
  }
  Polynomial operator+(Polynomial const &r){
    Polynomial result;
    result.capacity=max(this->capacity,r.capacity);
    result.degCoeff=new int [result.capacity];
    for(int i=0;i<result.capacity;i++){
      result.degCoeff[i]=0;
    }
    for(int i=0;i<result.capacity;i++){
      if(i<this->capacity && i<r.capacity){
        result.degCoeff[i]=this->degCoeff[i]+r.degCoeff[i];
      }
      else if(i<this->capacity){
        result.degCoeff[i]=this->degCoeff[i];
      }
      else if(i<r.capacity){
        result.degCoeff[i]=r.degCoeff[i];
      }
    }
    return result;
  }
  Polynomial operator-(Polynomial const &r){
    Polynomial result;
    result.capacity=max(this->capacity,r.capacity);
    result.degCoeff=new int [result.capacity];
    for(int i=0;i<result.capacity;i++){
      result.degCoeff[i]=0;
    }
    for(int i=0;i<result.capacity;i++){
      if(i<this->capacity && i<r.capacity){
        result.degCoeff[i]=this->degCoeff[i]-r.degCoeff[i];
      }
      else if(i<this->capacity){
        result.degCoeff[i]=this->degCoeff[i];
      }
      else if(i<r.capacity){
        result.degCoeff[i]=-r.degCoeff[i];
      }
    }
    return result;
  }
  Polynomial operator*(Polynomial const &r){
   Polynomial result;
    result.capacity=this->capacity+r.capacity;
    result.degCoeff=new int [result.capacity];
    for(int i=0;i<result.capacity;i++){
      result.degCoeff[i]=0;
    }
    for(int i=0;i<this->capacity;i++){
      for(int j=0;j<r.capacity;j++){
        int k=i+j;
        result.degCoeff[k]=result.degCoeff[k]+(this->degCoeff[i]*r.degCoeff[j]);
      }
    }
    return result;
  }
  void print(){
    for(int i=0;i<this->capacity;i++){
      if(degCoeff[i]!=0){
        cout<<degCoeff[i]<<"x"<<i<<" ";
      }
    }
  }
  };
